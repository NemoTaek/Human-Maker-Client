[{"/home/jk/codestates/HumanMaker-client/client/src/modules/login.js":"1","/home/jk/codestates/HumanMaker-client/client/src/component/signin/Signin.js":"2","/home/jk/codestates/HumanMaker-client/client/src/App.js":"3","/home/jk/codestates/HumanMaker-client/client/src/component/signout/Signout.js":"4","/home/jk/codestates/HumanMaker-client/client/src/modules/User.js":"5","/home/jk/codestates/HumanMaker-client/client/src/index.js":"6","/home/jk/codestates/HumanMaker-client/client/src/component/nav/Nav.js":"7","/home/jk/codestates/HumanMaker-client/client/src/component/signup/Signup.js":"8"},{"size":901,"mtime":1607491517294,"results":"9","hashOfConfig":"10"},{"size":5825,"mtime":1607692794089,"results":"11","hashOfConfig":"10"},{"size":516,"mtime":1607491517278,"results":"12","hashOfConfig":"10"},{"size":1531,"mtime":1607707297865,"results":"13","hashOfConfig":"10"},{"size":1349,"mtime":1607491517290,"results":"14","hashOfConfig":"10"},{"size":952,"mtime":1607491517290,"results":"15","hashOfConfig":"10"},{"size":2459,"mtime":1607705992559,"results":"16","hashOfConfig":"10"},{"size":6204,"mtime":1607692774761,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nhkoan",{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jk/codestates/HumanMaker-client/client/src/modules/login.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/signin/Signin.js",["38","39","40"],"import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport ReactDOM from \"react-dom\"\nimport axios from 'axios'\nimport './Signin.css'\nimport { useDispatch } from 'react-redux';\nimport { userid, userpassword } from \"../../modules/User\";\nimport { GoogleLogin } from 'react-google-login';\nimport KakaoLogin from 'react-kakao-login';\n\nconst Signin = forwardRef((props, ref) => {\n\n\tconst googleAPI = \"\";\n\tconst kakaoAPI = \"\";\n\t// const naverAPI = \"\";\n\n\tconst [display, setDisplay] = useState(false);\n\n\tuseImperativeHandle(ref, () => {\n\t\treturn {\n\t\t\tloginOpen: () => openLogin(),\n\t\t\tloginClick: () => closeLogin()\n\t\t}\n\t})\n\tconst openLogin = () => {\n\t\tsetDisplay(true)\n\t}\n\tconst closeLogin = () => {\n\t\tsetDisplay(false)\n\t}\n\tconst clickBg = () => {\n\t\tsetDisplay(false)\n\t}\n\n\tuseEffect(() => {\n\t\tif (display) {\n\t\t\tif (props.isRememberId) {\n\t\t\t\tdocument.getElementsByClassName(\"sign_in_idInput\")[0].value = props.rememberId;\n\t\t\t}\n\t\t}\n\t}, []);\n\n\t// const isLogin = useSelector(state => state.login.isLogin);\n\tconst [isLogInMsg, setIsLogInMsg] = useState(\"\");\n\n\tconst [id, setId] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\n\tconst [checkRememberId, setCheckRememberId] = useState(props.isRememberId);\n\n\tconst dispatch = useDispatch();\n\tconst onId = () => dispatch(userid(id));\t// input에 있는 id를 store에 저장\n\tconst onPassword = () => dispatch(userpassword(password));\t// input에 있는 password를 store에 저장\n\n\tconst onChangeId = e => {\n\t\tsetId(e.target.value);\n\t}\n\tconst onChangePw = e => {\n\t\tsetPassword(e.target.value);\n\t}\n\n\tconst onKeyEnt = e => {\n\t\tif (e.key === \"Enter\") {\n\t\t\tonClickSignInBtn();\n\t\t}\n\t}\n\n\tconst onCheckboxChangeHandler = (e) => {\n\t\tsetCheckRememberId(!checkRememberId);\n\n\t\t// 아이디 기억하기가 체크되어있으면\n\t\tif (e.target.checked) {\n\t\t\t// input값에 store에 저장되어있는 id 출력\n\t\t\tprops.onRememberId();\n\t\t}\n\t\telse {\n\t\t\tprops.onForgotId();\n\t\t}\n\t};\n\n\tconst onClickSignInBtn = () => {\n\t\tconst userData = { id: id, password: password };\n\t\t// axios\n\t\t// \t.post(\"http://54.180.120.81:5000/signin\", userData)\n\t\t// \t.then(data => {\n\t\t// \t\tif (data) {\n\t\t// \t\t\tonId();\t// input에 있는 id를 store에 저장\n\t\t// \t\t\tonPassword();\t// input에 있는 password를 store에 저장\n\t\t// \t\t\tonLogin();\t// isLogin을 true로 변환\n\t\t// \t\t\tdocument.location.replace(\"/\");\n\t\t// \t\t}\n\t\t// \t\telse {\n\t\t// \t\t\tsetIsLogInMsg(\"등록되지 않은 아이디 또는 잘못 된 비밀번호 입니다.\");\n\t\t// \t\t}\n\t\t// \t}).catch(err => {\n\t\t// \t\tconsole.log(err);\n\t\t// \t})\n\n\t\tif (!id) {\n\t\t\tsetIsLogInMsg(\"아이디를 입력해주세요.\");\n\t\t}\n\t\tif (id && !password) {\n\t\t\tsetIsLogInMsg(\"비밀번호를 입력해주세요.\");\n\t\t}\n\t\telse {\n\t\t\tsetIsLogInMsg(\"\");\n\t\t}\n\n\t\tonId();\n\t\tonPassword();\n\t\tprops.onLogin();\n\t\tcloseLogin();\n\t}\n\n\tconst onClickSignUpBtn = () => {\n\t\tdocument.location.replace(\"/signup\");\n\t}\n\n\tconst responseGoogle = (res) => {\n\t\tconsole.log(res);\n\t\tsetId(res.profileObj.name);\t// 구글아이디로 로그인하면 그 id 값을 state에 설정\n\t\tonId();\t// 위에서 id값을 googleId로 했으므로 onId로 이 id를 store에 저장\n\t}\n\n\tconst responseKakao = (res) => {\n\t\t// console.log(res);\n\t\t// setId(res.profile.id);\t// 구글아이디로 로그인하면 그 id 값을 state에 설정\n\t\t// onId();\t// 위에서 id값을 googleId로 했으므로 onId로 이 id를 store에 저장\n\n\t\twindow.Kakao.API.request({\n\t\t\turl: '/v2/user/me',\n\t\t\tsuccess: async res => {\n\t\t\t\tconsole.log(\"getme : \", res);\n\t\t\t\tconsole.log(\"getme : \", res.kakao_account);\n\t\t\t\t// const account = res.Kakao_account;\n\t\t\t},\n\t\t\tfail: error => {\n\t\t\t\tconsole.log(\"error : \", error);\n\t\t\t}\n\t\t})\n\t\tconsole.log(res)\n\t\tconsole.log(\"success\")\n\t}\n\n\t// const responseNaver = new naver.LoginWithNaverId({\n\t// \tclientId: naverAPI,\n\t// \tcallbackUrl: \"127.0.0.1:3000\",\n\t// \tcallbackHandle: true,\n\t// \tloginButton: {\n\t// \t\tcolor: \"green\",\n\t// \t\ttype: \"3\",\n\t// \t\theight: \"30\"\n\t// \t}\n\t// });\n\n\tconst responseFail = (err) => {\n\t\tconsole.log(err);\n\t}\n\n\tif (display) {\n\t\treturn ReactDOM.createPortal(\n\t\t\t<div className=\"modalWrapper\" >\n\t\t\t\t<div className=\"modalBg\" onClick={clickBg} ></div>\n\t\t\t\t<div className=\"sign_in_modalBox\">\n\t\t\t\t\t<div className=\"sign_in_wrap\">\n\t\t\t\t\t\t<div className=\"sign_in_container\">\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<p className=\"sign_in_name\" >로그인</p>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className=\"input_container_wrap\">\n\t\t\t\t\t\t\t\t<div className=\"input_container\">\n\t\t\t\t\t\t\t\t\t<div className=\"input_name\">\n\t\t\t\t\t\t\t\t\t\t<span>아이디</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<input className=\"sign_in_idInput\" type=\"text\" onChange={onChangeId} tabIndex=\"1\" autoFocus required />\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"input_container\">\n\t\t\t\t\t\t\t\t\t<div className=\"input_name\">\n\t\t\t\t\t\t\t\t\t\t<span> 비밀번호</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<input className=\"sign_in_pwInput\" type=\"password\" onChange={onChangePw} tabIndex=\"2\" onKeyPress={onKeyEnt} required />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<label className=\"remember_id\">\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={checkRememberId} onChange={e => onCheckboxChangeHandler(e)} tabIndex=\"3\" />아이디 기억하기\n\t\t\t\t\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t\t<div className=\"login_message\">\n\t\t\t\t\t\t\t\t<p>{isLogInMsg}</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={onClickSignInBtn} tabIndex=\"4\" >로그인</button>\n\n\t\t\t\t\t\t\t<button className=\"btn\" onClick={onClickSignUpBtn} tabIndex=\"5\" >간편 회원가입</button>\n\n\t\t\t\t\t\t\t<GoogleLogin className=\"oauth_btn\" clientId={googleAPI} buttonText=\"Google\" onSuccess={responseGoogle} onFailure={responseFail} />\n\t\t\t\t\t\t\t<KakaoLogin className=\"oauth_btn\" clientId={kakaoAPI} buttonText=\"Kakao\" onSuccess={responseKakao} onFailure={responseFail} getProfile=\"true\" />\n\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>, document.getElementById(\"modal_root\")\n\t\t);\n\t}\n\treturn null;\n\n})\n\nexport default Signin;         ",["41","42"],"/home/jk/codestates/HumanMaker-client/client/src/App.js",[],["43","44"],"/home/jk/codestates/HumanMaker-client/client/src/component/signout/Signout.js",[],"/home/jk/codestates/HumanMaker-client/client/src/modules/User.js",["45"],"import { createAction, handleActions } from 'redux-actions'\n\n// 액션 타입 정의하기\n// 액션 타입은 대문자로 작성하고\n// 문자열 내용은 모듈명/액션 이름 형식으로 작성한다.\nconst USERID = \"User/USERID\";\nconst USERPASSWORD = \"User/USERPASSWORD\";\n\n// export const login = () => ({ type: LOGIN });\n// export const logout = () => ({ type: LOGOUT });\nexport const userid = (id) => ({ type: USERID, payload: id });\nexport const userpassword = (password) => ({ type: USERPASSWORD, payload: password });\n\n// 초기 상태 작성하기\nconst initialState = {\n  id: '',\n  password: ''\n}\n\n// // Reducer 함수 만들기\n// function loginStatus(state = initialState, action) {\n//   switch (action.type) {\n//     case LOGIN:\n//       return {\n//         ...state,\n//         isLogin: true\n//       };\n//     case LOGOUT:\n//       return {\n//         ...state,\n//         isLogin: false\n//       };\n//     default:\n//       return state;\n//   }\n// }\n// export default loginStatus;\n\n// 하지만 redux-action을 설치하면 다음으로 바뀔 수 있다.\nconst userStatus = handleActions(\n  {\n    [USERID]: (state, action) => ({\n      ...state,\n      id: action.payload\n    }),\n    [USERPASSWORD]: (state, action) => ({\n      ...state,\n      password: action.payload\n    })\n  },\n  initialState\n);\n\nexport default userStatus;","/home/jk/codestates/HumanMaker-client/client/src/index.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/nav/Nav.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/signup/Signup.js",[],{"ruleId":"46","severity":1,"message":"47","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":40,"column":5,"nodeType":"52","endLine":40,"endColumn":7,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"54","line":81,"column":9,"nodeType":"48","messageId":"49","endLine":81,"endColumn":17},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"55","replacedBy":"59"},{"ruleId":"57","replacedBy":"60"},{"ruleId":"46","severity":1,"message":"61","line":1,"column":10,"nodeType":"48","messageId":"49","endLine":1,"endColumn":22},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'display', 'props.isRememberId', and 'props.rememberId'. Either include them or remove the dependency array.","ArrayExpression",["62"],"'userData' is assigned a value but never used.","no-native-reassign",["63"],"no-negated-in-lhs",["64"],["63"],["64"],"'createAction' is defined but never used.",{"desc":"65","fix":"66"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [display, props.isRememberId, props.rememberId]",{"range":"67","text":"68"},[959,961],"[display, props.isRememberId, props.rememberId]"]