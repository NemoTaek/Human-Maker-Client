[{"/home/jk/codestates/HumanMaker-client/client/src/index.js":"1","/home/jk/codestates/HumanMaker-client/client/src/App.js":"2","/home/jk/codestates/HumanMaker-client/client/src/component/goal/Goal.js":"3","/home/jk/codestates/HumanMaker-client/client/src/component/mypage/chronicles/Chronicles.js":"4","/home/jk/codestates/HumanMaker-client/client/src/component/mypage/changePassword/ChangePassword.js":"5","/home/jk/codestates/HumanMaker-client/client/src/component/nav/Nav.js":"6","/home/jk/codestates/HumanMaker-client/client/src/component/signup/Signup.js":"7","/home/jk/codestates/HumanMaker-client/client/src/component/signin/Signin.js":"8","/home/jk/codestates/HumanMaker-client/client/src/component/main/Main.js":"9","/home/jk/codestates/HumanMaker-client/client/src/component/mypage/myGoals/MyGoals.js":"10","/home/jk/codestates/HumanMaker-client/client/src/component/mypage/myCharacters/MyCharacters.js":"11","/home/jk/codestates/HumanMaker-client/client/src/component/signout/Signout.js":"12","/home/jk/codestates/HumanMaker-client/client/src/modules/index.js":"13","/home/jk/codestates/HumanMaker-client/client/src/component/goal/plan/Plan.js":"14"},{"size":952,"mtime":1607491517290,"results":"15","hashOfConfig":"16"},{"size":940,"mtime":1608294804179,"results":"17","hashOfConfig":"16"},{"size":10436,"mtime":1608296328791,"results":"18","hashOfConfig":"16"},{"size":0,"mtime":1608193969172,"results":"19","hashOfConfig":"16"},{"size":5875,"mtime":1608296129080,"results":"20","hashOfConfig":"16"},{"size":2968,"mtime":1608295001801,"results":"21","hashOfConfig":"16"},{"size":6918,"mtime":1608295131177,"results":"22","hashOfConfig":"16"},{"size":7664,"mtime":1608294393196,"results":"23","hashOfConfig":"16"},{"size":3969,"mtime":1608093732408,"results":"24","hashOfConfig":"16"},{"size":1396,"mtime":1608294309133,"results":"25","hashOfConfig":"16"},{"size":1664,"mtime":1608193570566,"results":"26","hashOfConfig":"16"},{"size":1356,"mtime":1608294211465,"results":"27","hashOfConfig":"16"},{"size":187,"mtime":1608093732412,"results":"28","hashOfConfig":"16"},{"size":2885,"mtime":1608298012096,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1nhkoan",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jk/codestates/HumanMaker-client/client/src/index.js",[],["61","62"],"/home/jk/codestates/HumanMaker-client/client/src/App.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/goal/Goal.js",["63","64","65","66"],"/home/jk/codestates/HumanMaker-client/client/src/component/mypage/chronicles/Chronicles.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/mypage/changePassword/ChangePassword.js",["67"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport './ChangePassword.css';\nimport axios from 'axios'\nimport { userpassword } from \"../../../modules/User\"\nimport cloud1 from \"../../../img/cloud1.png\"\nimport middleCloud from \"../../../img/middlecloud.png\"\n\nfunction ChangePassword(props) {\n\n  const [currentPw, setCurrentPw] = useState(\"\");\n  const [currentPwMsg, setCurrentPwMsg] = useState(\"error\");\n\n  const onChangeCurrentPw = e => {\n    setCurrentPw(e.target.value);\n  }\n  useEffect(() => {\n    if (!currentPw) {\n      setCurrentPwMsg(\"error\")\n    }\n    else if (currentPw === props.pw) {\n      setCurrentPwMsg(\"현재 비밀번호와 일치합니다.\");\n    }\n    else {\n      setCurrentPwMsg(\"현재 비밀번호와 일치하지 않습니다.\");\n    }\n  }, [currentPw])\n\n  const [password, setPassword] = useState(\"\");\n  const [pwCheckMsg, setPwCheckMsg] = useState(\"error\");\n  const [pwCheck, setPwCheck] = useState(false);\n\n  const onChangePw = e => {\n    setPassword(e.target.value);\n  }\n  useEffect(() => {\n    // let num = password.search(/[0-9]/g);\n    // let eng = password.search(/[a-z]/ig);\n    let spe = /[~!@#$%^&*()_+|<>?:{}]/gi;\n    let test = spe.test(password)\n\n    if (!password) {\n      setPwCheckMsg(\"error\");\n      setPwCheck(false);\n    }\n    else if (password.length < 8) {\n      setPwCheckMsg(\"비밀번호는 8자리 이상만 가능합니다.\");\n      setPwCheck(false);\n    }\n    else if (password.search(/\\s/) !== -1) {\n      setPwCheckMsg(\"공백없이 입력해 주세요.\");\n      setPwCheck(false);\n    }\n    else if (test === false) { // 작동 안하는듯..\n      setPwCheckMsg(\"영문, 숫자, 특수문자를 조합해서 입력해주세요.\");\n      setPwCheck(false);\n    }\n    else {\n      setPwCheckMsg(\"사용가능한 비밀번호 입니다.\");\n      setPwCheck(true);\n    }\n  }, [password])\n\n  const [pwDouble, setPwDouble] = useState(\"\");\n  const [pwDoubleMsg, setPwDoubleMsg] = useState(\"error\");\n  const [pwDoubleCheck, setPwDoubleCheck] = useState(false);\n\n  const onChangePwDoubleCk = e => {\n    setPwDouble(e.target.value);\n  }\n  useEffect(() => {\n    if (!password || !pwDouble) {\n      setPwDoubleMsg(\"error\");\n      setPwDoubleCheck(false);\n    }\n    else if (pwDouble === password) {\n      setPwDoubleMsg(\"비밀번호가 일치합니다.\");\n      setPwDoubleCheck(true);\n    }\n    else {\n      setPwDoubleMsg(\"비밀번호가 일치하지 않습니다.\");\n      setPwDoubleCheck(false);\n    }\n\n  }, [password, pwDouble])\n\n  const dispatch = useDispatch();\n  const onPassword = () => dispatch(userpassword(password));\t// input에 있는 password를 store에 저장\n\n  const changePassword = () => {\n    const userData = { id: props.id, password: password };\n\n    if (pwCheck && pwDoubleCheck) {\n      if (currentPw === props.pw && password === pwDouble) {\n        axios\n          .put(\"http://localhost:5000/mypage/ChangeMyPassword\", userData)\n          .then(data => {\n            if (data) {\n              onPassword();\n              alert(\"비밀번호 변경이 완료되었습니다.\")\n              setCurrentPw(\"\");\n              document.getElementsByClassName('current_pw')[0].value = \"\";\n              setCurrentPwMsg(\"\");\n              setPassword(\"\");\n              document.getElementsByClassName('change_pw')[0].value = \"\";\n              setPwCheckMsg(\"\");\n              setPwDouble(\"\");\n              document.getElementsByClassName('change_pw_check')[0].value = \"\";\n              setPwDoubleMsg(\"\");\n            }\n          }).catch(err => {\n            console.log(err);\n          })\n      }\n      else {\n        alert(\"아직 비밀번호를 변경하실 수 없습니다. 정보를 확인해주세요.\")\n      }\n    }\n    else {\n      alert(\"아직 비밀번호를 변경하실 수 없습니다. 정보를 확인해주세요.\")\n    }\n  }\n\n  return (\n    <div className=\"change_pw_container\">\n      \n      <div className=\"middlecloud_wrap\">\n        <img className=\"middlecloud\" src={middleCloud} alt=\"\" />\n      </div>\n\n      <div className=\"change_pw_height\">\n        <div className=\"change_pw_wrap\">\n\n          <div className=\"change_name\">\n            <p>비밀번호 변경</p>\n          </div>\n          \n          <div className=\"input_wrap\">\n            <label>아이디: </label>\n            <div className=\"id\" >{props.id}</div>\n          </div>\n\n          <div className=\"input_wrap\">\n            <label>현재 비밀번호: </label>\n            <input className=\"current_pw\" type=\"password\" onChange={onChangeCurrentPw} required></input>\n            <p className={currentPwMsg === \"error\" ? \"none_checkMsg\" : (currentPwMsg === \"현재 비밀번호와 일치합니다.\" ? \"successMsg\": \"falseMsg\")} >{currentPwMsg}</p>\n          </div>\n\n          <div className=\"input_wrap\">\n            <label>새 비밀번호: </label>\n            <input className=\"change_pw\" type=\"password\" onChange={onChangePw} required></input>\n            <p className={pwCheckMsg === \"error\" ? \"none_checkMsg\" : (pwCheckMsg === \"사용가능한 비밀번호 입니다.\" ? \"successMsg\": \"falseMsg\")}>{pwCheckMsg}</p>\n          </div>\n\n          <div className=\"input_wrap\">\n            <label>새 비밀번호 확인: </label>\n            <input className=\"change_pw_check\" type=\"password\" onChange={onChangePwDoubleCk} required></input>\n            <p className={pwDoubleMsg === \"error\" ? \"none_checkMsg\" : (pwDoubleMsg === \"비밀번호가 일치합니다.\" ? \"successMsg\": \"falseMsg\")}>{pwDoubleMsg}</p>\n          </div>\n\n          <div className=\"change_btn_wrap\">\n            <button className=\"change_btn\" onClick={changePassword}>변경하기</button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"cloud1_wrap\">\n        <img className=\"cloud\" src={cloud1} alt=\"\" />\n      </div>\n    </div>\n  );\n}\n\nexport default ChangePassword;\n","/home/jk/codestates/HumanMaker-client/client/src/component/nav/Nav.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/signup/Signup.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/signin/Signin.js",["68","69","70"],"/home/jk/codestates/HumanMaker-client/client/src/component/main/Main.js",[],["71","72"],"/home/jk/codestates/HumanMaker-client/client/src/component/mypage/myGoals/MyGoals.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/mypage/myCharacters/MyCharacters.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/signout/Signout.js",[],"/home/jk/codestates/HumanMaker-client/client/src/modules/index.js",[],"/home/jk/codestates/HumanMaker-client/client/src/component/goal/plan/Plan.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":31,"column":18,"nodeType":"79","endLine":31,"endColumn":32},{"ruleId":"77","severity":1,"message":"80","line":32,"column":22,"nodeType":"79","endLine":32,"endColumn":40},{"ruleId":"77","severity":1,"message":"81","line":33,"column":22,"nodeType":"79","endLine":33,"endColumn":40},{"ruleId":"77","severity":1,"message":"82","line":34,"column":22,"nodeType":"79","endLine":34,"endColumn":40},{"ruleId":"77","severity":1,"message":"83","line":27,"column":6,"nodeType":"84","endLine":27,"endColumn":17,"suggestions":"85"},{"ruleId":"77","severity":1,"message":"86","line":52,"column":5,"nodeType":"84","endLine":52,"endColumn":14,"suggestions":"87"},{"ruleId":"77","severity":1,"message":"88","line":57,"column":5,"nodeType":"84","endLine":57,"endColumn":14,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":147,"column":8,"nodeType":"79","messageId":"92","endLine":147,"endColumn":9,"fix":"93"},{"ruleId":"73","replacedBy":"94"},{"ruleId":"75","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","Assignments to the 'goal' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'subgoal1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'subgoal2' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'subgoal3' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'props.pw'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'props.isRememberId' and 'props.rememberId'. Either include them or remove the dependency array.",["99"],"React Hook useEffect has a missing dependency: 'naverLogin'. Either include it or remove the dependency array.",["100"],"dot-location","Expected dot to be on same line as property.","expectedDotBeforeProperty",{"range":"101","text":"102"},["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},[3519,3525],"\n\t\t\t\t.","Update the dependencies array to be: [currentPw, props.pw]",{"range":"109","text":"110"},"Update the dependencies array to be: [display, props.isRememberId, props.rememberId]",{"range":"111","text":"112"},"Update the dependencies array to be: [display, naverLogin]",{"range":"113","text":"114"},[759,770],"[currentPw, props.pw]",[1204,1213],"[display, props.isRememberId, props.rememberId]",[1277,1286],"[display, naverLogin]"]